disable_last_layer: true
softmax_outputs: false
simplify: true

train_data:
  - "20;F;F~F"
  - "90;F;F~FF"
  - "45;F[+F][-F]FF;F~FF"
  - "60;F+F-F;F~F+FF"
  - "60;F;F~F[+F][-F]F"

holdout_data:
  - "90;F-F-F-F;F~F+FF-FF-F-F+F+FF-F-F+F+FF+FF-F"
  - "90;-F;F~F+F-F-F+F"
  - "90;F-F-F-F;F~FF-F-F-F-F-F+F"
  - "90;F-F-F-F;F~FF-F-F-F-FF"
  - "90;F-F-F-F;F~FF-F+F-F-FF"
  - "90;F-F-F-F;F~FF-F--F-F"
  - "90;F-F-F-F;F~F-FF--F-F"
  - "90;F-F-F-F;F~F-F+F-F-F"
  - "20;F;F~F[+F]F[-F]F"
  - "20;F;F~F[+F]F[-F][F]"
  - "20;F;F~FF-[-F+F+F]+[+F-F-F]"

search:
  samples_per_program: 1
  iters: 100
  select: strict
  alpha: 1
  max_popn_size: 100
  samples_ratio: 10
  keep_per_iter: 10  # archiving rate

  # length penalties
  length_cap: 200
  length_penalty_type: inverse
  length_penalty_inverse_coeff: 1
  length_penalty_additive_coeff: 0

  # heuristics
  ablate_mutator: false
  archive_early: true
  gaussian_blur_sigma: 3

render:
  step_length: 4
  render_depth: 3
  n_rows: 128
  n_cols: 128