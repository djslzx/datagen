program: ns.py
method: random
metric:
  goal: maximize
  name: avg_dist
parameters:
  disable_last_layer:
    values: [ "true", "false" ]
  softmax_outputs:
    values: [ "true", "false" ]
  train_data:
    value:
      - "20;F;F~F"
      - "90;F;F~FF"
      - "45;F[+F][-F]FF;F~FF"
      - "60;F+F-F;F~F+FF"
      - "60;F;F~F[+F][-F]F"
    holdout_data:
      value:
        - "90;F-F-F-F;F~F+FF-FF-F-F+F+FF-F-F+F+FF+FF-F"
        - "90;-F;F~F+F-F-F+F"
        - "90;F-F-F-F;F~FF-F-F-F-F-F+F"
        - "90;F-F-F-F;F~FF-F-F-F-FF"
        - "90;F-F-F-F;F~FF-F+F-F-FF"
        - "90;F-F-F-F;F~FF-F--F-F"
        - "90;F-F-F-F;F~F-FF--F-F"
        - "90;F-F-F-F;F~F-F+F-F-F"
        - "20;F;F~F[+F]F[-F]F"
        - "20;F;F~F[+F]F[-F][F]"
        - "20;F;F~FF-[-F+F+F]+[+F-F-F]"

  # novelty search hyperparams
  search:
    parameters:
      kind:
        values: [evo]
      samples_per_program:
        value: 1
      iters:
        value: 100
      select:
        values: [strict, weighted]
      alpha:
        distribution: log_uniform_values
        min: 0.1
        max: 10
      max_popn_size:
        value: 100
      samples_ratio:
        distribution: q_log_uniform_values
        min: 2
        max: 100
      keep_per_iter:
        distribution: q_log_uniform_values
        min: 2
        max: 50
      length_cap:
        value: 200
      length_penalty:
        distribution: log_uniform_values
        min: 0.0001
        max: 0.1
      ablate_mutator:
        values: ["true", "false"]
      archive_early:
        values: [ "true", "false" ]
      gaussian_blur_sigma:
        values: [ 1, 2, 3, 4, 5 ]

  # rendering params
  render:
    parameters:
      step_length:
        value: 4
      render_depth:
        value: 3
      n_rows:
        value: 128
      n_cols:
        value: 128